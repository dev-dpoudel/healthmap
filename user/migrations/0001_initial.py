# Generated by Django 3.1.4 on 2021-01-03 11:07

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birth_date', models.DateField(default=django.utils.timezone.now, help_text='Date of Birth')),
                ('country', models.CharField(help_text='Country Name', max_length=20, null=True)),
                ('current_city', models.CharField(help_text='Current City', max_length=25, null=True)),
                ('current_address', models.CharField(help_text='Current Address', max_length=100, null=True)),
                ('permanent_address', models.CharField(help_text='Permanent Address', max_length=100, null=True)),
                ('phone_number', models.CharField(help_text='Default Contact Number', max_length=15, null=True)),
                ('blood_group', models.CharField(help_text='Blood Group and Type', max_length=7, null=True)),
                ('allergies', models.CharField(help_text='Known Allergies', max_length=500, null=True)),
                ('emergency_contact', models.CharField(help_text='Contact Number inCase of Emergency', max_length=50, null=True)),
                ('contact_relation', models.CharField(help_text='Relation to User', max_length=20, null=True)),
                ('modified_date', models.DateField(default=django.utils.timezone.now, help_text='Modified Date')),
                ('entered_by', models.CharField(help_text='Username performing data Audit', max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='username_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['first_name', 'last_name'], name='name_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['blood_group'], name='bloodgroup_idx'),
        ),
    ]
